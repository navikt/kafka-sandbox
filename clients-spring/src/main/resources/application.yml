spring:
  application:
    name: Kafka sandbox boot-app
  # See class org.springframework.boot.autoconfigure.kafka.KafkaProperties:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      client-id: boot-app
      group-id: ${GROUPID:boot-app}
      properties:
        spring.json.trusted.packages: no.nav.kafka.sandbox.messages
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest

logging:
  exception-conversion-word: "%wEx{short}" # shorter log traces are nice when experimenting with error handling
  level:
    org.apache.kafka: error

consolemessages:
  event-store:
    max-size: 200
  consumer:
    topic: messages

measurements:
  event-store:
    # max size, older events will be discarded, unless 'fail-on-max-size' is true
    max-size: 200
    # set to true to fail instead of discarding old elements when event store is full (test Kafka error handling for a persistent error)
    fail-on-max-size: false
    # set how often store writes should fail (to test Kafka consumer error handling for errors occuring sometimes)
    # Can be in two different forms:
    # 1. floating point number between 0.0 and 1.0, where failure will occur randomly at approximately this ratio.
    # 2. Two numbers x/y, where x denotes number of times to fail and y denotes total number of times for a cycle, before the
    #    failure pattern repeats. E.g "9/10" will cause 9 consequtive failures and one success, before it repeats.
    failure-rate: 0.0

  consumer:
    topic: measurements

    # increase this to slow down batch consumer, which will result in getting larger batches for each call (value in milliseconds)
    slowdown: 0

    # Select error handler:
    # 'spring-default': just uses the Spring default for batch error handling (does not explicitly set an error handler).
    # 'log-and-ignore': logs, but ignores all errors from consumer, implemented in Spring error handler CommonLoggingErrorHandler.
    # 'infinite-retry': tries failed batches an infinite number of times, with a backoff/delay between each attempt. Spring DefaultErrorHandler with a BackOff.
    # 'retry-with-backoff': Spring DefaultErrorHandler with 2 retry attempts
    # 'retry-with-backoff-recovery': no.nav.k.s.m.e.RetryingErrorHandler with custom ConsumerRecordRecoverer set.
    # 'recovering': no.nav.k.s.m.e.RecoveringErrorHandler
    # 'stop-container': Spring CommonContainerStoppingErrorHandler
    error-handler: spring-default

    # Select whether consumer should throw BatchListenerFailedException w/cause when an internal processing failure occurs, or
    # just directly throw any exception. Setting to true will allow Spring to detect where a failure occured in a batch of multiple
    # records.
    useBatchListenerFailedException: false

    # Select whether deserialization exceptions of values should be handled:
    handle-deserialization-error: true
