spring:
  application:
    name: Kafka sandbox web
  # See class org.springframework.boot.autoconfigure.kafka.KafkaProperties:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      client-id: spring-web
      group-id: ${GROUPID:spring-web}
      properties:
        spring.json.trusted.packages: no.nav.kafka.sandbox.messages
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest

logging:
  exception-conversion-word: "%wEx{short}" # shorter log traces are nice when experimenting with error handling
  level:
    org.apache.kafka: error

consolemessages:
  event-store:
    max-size: 200
  consumer:
    topic: messages

measurements:
  event-store:
    # max size, older events will be discarded, unless 'fail-on-max-size' is true
    max-size: 200
    # set to true to fail instead of discarding old elements when event store is full (test Kafka error handling for a persistent error)
    fail-on-max-size: false
    # set how often store writes should fail (to test Kafka consumer error handling for errors occuring sometimes)
    failure-rate: 0.0
  consumer:
    topic: measurements

    # increase this to slow down batch consumer, which will result in getting larger batches for each call (value in milliseconds)
    slowdown: 0

    # Select error handler.
    # 'spring-default': just uses the Spring default for batch error handling (does not explicitly set an error handler).
    # 'ignore':  logs, but ignores all errors from consumer, implemented in class IgnoreErrorHandler.
    # 'seek-to-current': Spring SeekToCurrentBatchErrorHandler w/all defaults and no backoff (unlimited retries)
    # 'seek-to-current-with-backoff': Spring SeekToCurrentBatchErrorHandler w/fixed delay and max 2 retries.
    # 'retry-with-backoff': Spring RetryingBatchErrorHandler with no configured ConsumerRecordRecoverer
    # 'retry-with-backoff-recovery': Spring RetryingBatchErrorHandler with custom ConsumerRecordRecoverer set, see RetryingErrorHandler.
    # 'recovering': Spring RecoveringBatchErrorHandler, see RecoveringErrorHandler.
    error-handler: spring-default
